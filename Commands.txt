1. dotnet --version
2. dotnet new webapi -n PlatformService
    dotnet new webapi -n CommandsService
3. dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection
4. dotnet add package Microsoft.EntityFrameworkCore
5. dotnet add package Microsoft.EntityFrameworkCore.Design
6. dotnet add package Microsoft.EntityFrameworkCore.InMemory
7. dotnet add package Microsoft.EntityFrameworkCore.SqlServer

8. dotnet build

Docker
1. docker --version
2. docker build -t riteshsharma16/platformservice .    // build image
3. docker run -p 8080:80 -d riteshsharma16/platformservice   // run the image as new container
4. docker ps // show running container
5. docker stop <containerid>  // stop the container
6. docker start <containerid>   // restart existing container
7. docker login // do it first before docker push
8. docker push riteshsharma16/platformservice


Visual code
1. Directory listing
dir 
2. Open code
code -r <>>foldername>


Kubernetes
1. version
kubectl version

2. Create deployment file & do deployment
kubectl apply -f platforms.depl.yaml

opposite of apply is Delete
kubectl delete -f platforms.depl.yaml

3. See deployment files
kubectl get deployments

4. See pods
kubectl get pods

5. Delete Deployments
kubectl delete deployment <name of deployment>

6. Fetch latest image from kubernetes
kubectl rollout restart deployment platforms-depl

7. It works with namespaces. To see namespaces check following command
kubectl get namespace

8. To see what pod is associated with what namespace use following (creating load balancer)
kubectl get pods --namespace=ingress-nginx

9. To check load balancer for services
kubectl get services --namespace=ingress-nginx

10. To check storage class()
kubectl get storageclass

11. Create secret for config. in our case it is sql server login
kubectl create secret generic mssql --from-literal=SA_PASSWORD="pa55w0rd!"

12. To see error in pod
kubectl describe pod podname 

13. Delete secret
kubectl delete secret mssql // mssql is name of secret